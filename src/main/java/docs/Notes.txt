Java tricks and notes:

Search for a regex in a string
==================================
As in ClassExtras:

		private ArrayList<String> getRegexFromString(String s, String regex){
				
				ArrayList<String> result = new ArrayList<>();
				
				Pattern p = Pattern.compile(regex);
				Matcher m = p.matcher(s);
				while(m.find()){
					result.add(m.group(1));
				}
				
				return result;
			}
	
Example of regex:
-----------------
.*get(.*)Extra.* : match the pattern *get*Extra* and get the string between get and Extra
.*get.*Extra\\(\"(.*?)\".*: match the pattern *get*Extra("*"* and get the string between the two quotes

Regex
=============================
Line: replaceLaunchIntent((Intent)localObject1, ((Intent)localObject1).getLongExtra(\"beginTime\", 0L), ((Intent)localObject1).getLongExtra(\"endTime\", 0L))
I wanna get: get*Extra("THIS"
regex: ".*get\\w+?Extra\\(\"(.*?)\".*" will get the last one only: endTime. That's because I use .* in the beginning
regex: ".*?get.*?Extra\\(\"(.*?)\".*"  will get the first beginTime, because I used the ungready .*? at the beginning. But it didn't get endTime cuz I used .* at the end
regex: "get.*?Extra\\(\"(.*?)\"" gets both.
Conclusion: using .* at the beginning or the end of the regex is usually unnecessary and it neglects all matches except the first/last (according to its location).

For negating:
"^(?!\\s*//\\s*from\\s*to\\s*target\\s*type)(.*$) to get away of // from to target type.
(.*$): to capture the "rest" of the line in case it doesn't match. means that it catches the whole line


REmoving duplicates
===================

private ArrayList<String> removeDuplicates(ArrayList<String> orig){
		return new ArrayList<String>(new LinkedHashSet<String>(orig));
	}	
	

Regarding DataUris
==================
1) Still try to optimize the DataUri blocks, not to override parameters defined together in the same Data Tag
	Initially done by excluding the "complete" blocks, assumed as data tags with scheme and host, from the whole mishmash process. This 
	might not be very true but it is considered a temporary solution
	 
2) DataUri should not have Path, path prefix and path pattern
	Solved with isPathConflict check. If true, then add the original d, copy it to d2, empty all path variables and then add the new
	path value
3) While adding other components, if a DataUri's component is set, then add the original DataURi and the new one with the new component 
   value
   	Already implemented
4) original tags are represented in datamaps this.collection array

5) datascheme://host works



-----------------------------------

Tickler_lib doesn't contain codec lib, needed for Base64 searches

Password for Tickler.keystore itsalright

Versions
---------
apktool 2.2
dex2jar 2.1
